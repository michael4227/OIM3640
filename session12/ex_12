# in class
def is_reverse(word1, word2):
    """Return True if WORD2 is the reversed WORD1"""
    if len(word1) != len(word2):
        return False

    i = 0
    j = len(word2)-1

    while j > 0:
        if word1[i] != word2[j]:
            return False
        i = i + 1
        j = j - 1
    return True
is_reverse('car','rac')


print(is_reverse('pots', 'stop'))

L = [
    ['Apple', 'Google', 'Microsoft'],
    ['Java', 'Python', ['Ruby', 'On Rail'], 'PHP'],
    ['Adam', 'Bart', 'Lisa']    
]
print(['Adam', 'Bart', 'Lisa']  in L)

# EX_2
t = ['a', 'b', 'c']
t.append('d')
t.extend('d')
print(t)
t.reverse()
t
t.sort(reverse=True)
t

a = [1,2,3]
name = 'chris'
a.extend(name)
name
a
a.append(name)
a
name

# Ex3
# not working
def nested_sum(t):
    """Computes the total of all numbers in a list of lists.

    t: list of list of numbers

    returns: number

    Expected output:
    >>> t = [[1, 2], [3], [4, 5, 6]]
    >>> nested_sum(t)
    21
    """
    sum = 0
    for i in range(len(t)+1):
        for a in range(len(i)+1):
            sum += a
    return sum
t = [[1, 2], [3], [4, 5, 6]]
nested_sum(t)


def cumsum(t):
    """Computes the cumulative sum of the numbers in t.

    t: list of numbers

    returns: list of numbers

    Expected output:
    >>> t = [1, 2, 3]
    >>> cumsum(t)
    [1, 3, 6]
    """
    a = []
    #a.append(t[0])
    for j in range(len(t)):
        if(len(a)==0):
            a.append(t[0])
        else:
            a.append(t[j]+a[j-1])
    return a
t = [1, 2, 3]
print(cumsum(t))

def middle(t):
    """Returns all but the first and last elements of t.

    t: list

    returns: new list

    Expected output:
    >>> t = [1, 2, 3, 4]
    >>> middle(t)
    [2, 3]
    """
    list = []
    for i in range(len(t)+1):
        list = t[1:-1]
    return list
t = [1, 2, 3, 4]
print(middle(t))

def chop(t):
    """Removes the first and last elements of t.

    t: list

    returns: None

    Expected output:
    >>> t = [1, 2, 3, 4]
    >>> chop(t)
    >>> t
    [2, 3]
    """
    list = []
    for i in range(len(t)):
        list = t[1:-1]
    t.append(list)
    del t[0:4]
    return t
t = [1, 2, 3, 4]
print(chop(t))

def is_sorted(t):
    """Checks whether a list is sorted.

    t: list

    returns: boolean

    Expected output:
    >>> is_sorted([1, 2, 2])
    True
    >>> is_sorted(['b', 'a'])
    False
    """
    for i in range(0,len(t)+1):
        if t[i]<= t[i+1]:
            return True
        else:
            return False
is_sorted([1, 2, 2])
is_sorted(['a', 'b'])


def is_anagram(word1, word2):
    """Checks whether two words are anagrams

    Two words are anagrams if you can rearrange the letters from one to
    spell the other.

    word1: string or list
    word2: string or list

    returns: boolean

    Expected output:
    >>> is_anagram('stop', 'pots')
    True
    >>> is_anagram('different', 'letters')
    False
    >>> is_anagram([1, 2, 2], [2, 1, 2])
    Ture
    """
    # if len(word1) != len(word2):
    #     return False

    # i = 0
    # j = len(word2)-1

    # while j > 0:
    #     if word1[i] != word2[j]:
    #         return False
    #     i = i + 1
    #     j = j - 1
    #     return True
    return sorted(word1)==sorted(word2)
is_anagram([1, 2, 2], [2, 1, 2])
is_anagram('stop', 'pots')
is_anagram('bee','egg')




def has_duplicates(s):
    """Returns True if any element appears more than once in a sequence.

    s: string or list

    returns: bool

    output:
    >>> print(has_duplicates('cba'))
    False
    >>> print(has_duplicates('abba'))
    True
    """
    # for i in range(len(s)-1):


def has_adjacent_duplicates(s):
    """Returns True if there are two same adjacent elements.

    s: string or list

    returns: bool

    output:
    >>> print(has_adjacent_duplicates('cba'))
    False
    >>> print(has_adjacent_duplicates('abca'))
    Flase
    >>> print(has_adjacent_duplicates('abbc'))
    True
    """
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            return True
        else:
            i += 1
    return False
print(has_adjacent_duplicates('cba'))
print(has_adjacent_duplicates('abca'))
print(has_adjacent_duplicates('abbc'))


def main():
    t = [[1, 2], [3], [4, 5, 6]]
    # print(nested_sum(t))

    # t = [1, 2, 3]
    # print(cumsum(t))

    # t = [1, 2, 3, 4]
    # print(middle(t))
    # chop(t)
    # print(t)

    # print(is_sorted([1, 2, 2]))
    # print(is_sorted(['b', 'a']))

    # print(is_anagram('stop', 'pots'))
    # print(is_anagram('different', 'letters'))
    # print(is_anagram([1, 2, 2], [2, 1, 2]))

    # print(has_duplicates('cba'))
    # print(has_duplicates('abba'))


if __name__ == "__main__":
    main()



